import React, { useState, useEffect } from "react";
import {
  Row,
  Col,
  Card,
  Button,
  List,
  Avatar,
  Divider,
  Skeleton,
  Input,
  Modal,
  Popconfirm,
  message,
  Table,
  Select,
  notification,
  Result,
} from "antd";
import {
  BALANCEARRAYS,
  notificaionTitle,
  PLATFORMSTATISTICSARRAYS,
} from "../constants";
import { EditOutlined } from "@ant-design/icons";
import EventBus from "../common/EventBus";
import InfiniteScroll from "react-infinite-scroll-component";
import { BASE_URL } from "../constants";
import {
  processingfetchingBalances,
  processingfetchingDeposit,
  processingfetchingPlatformStatistics,
  processingfetchingWithdraw,
  refactorBalances,
  calculateRealAvailableBalance,
  processingfetchingAllUsers,
  walletInfoFromPk,
  processingfetchingFlashloan,
  runFlashLoanBot,
  dateProcessor,
  txhashProcessor,
  requestWithdraw,
  requestQRcode,
  getCompanyAccount,
  getCompanyBalance,
} from "../common/script";
import { useSelector } from "react-redux";

import { ReactComponent as RegisteredTraders } from "./assets/platform_statistics/registered_traders.svg";
import { ReactComponent as ActiveOrders } from "./assets/platform_statistics/active_orders.svg";
import { ReactComponent as ClosedOrders } from "./assets/platform_statistics/closed_orders.svg";
import { ReactComponent as GeneratedRoi } from "./assets/platform_statistics/generated_roi.svg";
import { ReactComponent as OnlineUsers } from "./assets/platform_statistics/online_traders.svg";
import { ReactComponent as TradedVolume } from "./assets/platform_statistics/traded_volume.svg";
let page = 1;
let flashLoanTimer;
const BoardAdmin = () => {
  const { user: currentUser } = useSelector((state) => state.auth);
  const [runningFlashloan, setRunningFlashloan] = useState(false);
  const [loading, setLoading] = useState(false);
  const [data, setData] = useState([]);
  const [flashLoanData, setFlashLoanData] = useState([]);
  const [flashLoanHashData, setFlashLoanHashData] = useState([]);
  const [profitManageData, setProfitManageData] = useState([]);

  const [balances, setBalances] = useState({
    userTotalBalances: [],
    userTotalWithdraws: [],
    userDepositBalances: [],
  });
  const [primaryWalletState, setPrimaryWallet] = useState("");
  const [editWalletAddressState, setEditWalletAddress] = useState(
    "0xeB9d338CDa1e384128Dd506Cae40725F384aD662"
  );
  const [connectedWalletState, setConnectedWallet] = useState("");
  const [connectedPKState, setConnectPK] = useState("");
  const [isVisibleInputPK, setIsVisibleInputPK] = useState(false);
  const [editWalletPKState, setEditWalletPK] = useState("");
  const [secondaryWalletState, setSecondaryWallet] = useState("");
  const [isModalVisible, setIsModalVisible] = useState(false);
  const [isPrimaryWallet, setIsPrimaryWallet] = useState(true);
  const [depositsState, setDeposits] = useState([]);
  const [withdrawsState, setWithdraws] = useState([]);
  const [checkStrictly, setCheckStrictly] = useState(false);
  const [selectedRowKeys, setSelectedRowTokenKeys] = useState([]);
  const [amount, setAmount] = useState(0);
  const [token2faState, setToken2fa] = useState("");
  const [companyAccountState, setCompanyAccount] = useState(16);
  const [companyBalance, setCompanyBalance] = useState(0);

  //const [realAmountState, setRealAmount] = useState(1);
  const [address, setAddress] = useState("");
  const [isResultModalVisible, setIsResultModalVisible] = useState(false);
  const [resultState, setResultState] = useState({
    status: "info",
    title: "Modal",
    url: "",
    address: "",
    hash: "hash sample",
    subTitle: "subtitle",
  });
  const [qrcodeState, setQRcode] = useState({});
  const [statisticsState, setStatistics] = useState({
    registeredby24: 0,
    allusers: 0,
    tradevolume: 0,
    roi: 0,
    openorders: 0,
    closedorders: 0,
    created_at: "",
  });
  const [usersState, setUsers] = useState({
    users: [],
    rowCount: 10,
  });
  const [optionState, setOptionState] = useState({
    currencyId: 0,
    buttonId: 0,
  });
  const withdrawColumns = [
    { title: "Date", dataIndex: "created_at", key: "created_at" },
    { title: "To Address", dataIndex: "receiver", key: "receiver" },
    { title: "Amount", dataIndex: "amount", key: "amount" },
    { title: "Currency", dataIndex: "currency", key: "currency" },
    { title: "Status", dataIndex: "status", key: "status" },
    { title: "Tx", dataIndex: "txhash", key: "txhash" },
  ];
  const profitManageColumns = [
    { title: "Date", dataIndex: "created_at", key: "created_at" },
    { title: "Total earned", dataIndex: "earned", key: "earned" },
    { title: "User earend", dataIndex: "u_earned", key: "u_earned" },
    { title: "Company earend", dataIndex: "c_earned", key: "c_earned" },
    { title: "Order \n Amount", dataIndex: "amount", key: "amount" },
    { title: "Currency", dataIndex: "currency", key: "currency" },
    { title: "User", dataIndex: "user_id", key: "user_id" },
  ];
  const flashloanHashColumns = [
    { title: "No", dataIndex: "no", key: "no" },
    { title: "Date", dataIndex: "date", key: "date" },
    { title: "hash", dataIndex: "hash", key: "hash" },
  ];
  const marketColumns = [
    { title: "ERC-20 Token", dataIndex: "token", key: "token" },
    {
      title: "Uniswap v2",
      children: [
        {
          title: "Amount In",
          dataIndex: "v2amountin",
          key: "v2amountin",
        },
        {
          title: "Amount Out.",
          dataIndex: "v2amountout",
          key: "v2amountout",
        },
      ],
    },
    {
      title: "Sushiswap",
      children: [
        {
          title: "Amount In",
          dataIndex: "sushiamountin",
          key: "sushiamountin",
        },
        {
          title: "Amount Out.",
          dataIndex: "sushiamountout",
          key: "sushiamountout",
        },
      ],
    },
    {
      title: "Uniswap v3",
      children: [
        {
          title: "Amount In",
          dataIndex: "v3amountin",
          key: "v3amountin",
        },
        {
          title: "Amount Out.",
          dataIndex: "v3amountout",
          key: "v3amountout",
        },
      ],
    },
  ];
  const rowSelection = {
    onChange: (selectedRowKeys, selectedRows) => {
      // console.log(`selectedRowKeys: ${selectedRowKeys}`, 'selectedRows: ', selectedRows);
      setSelectedRowTokenKeys(selectedRowKeys);
      console.log(selectedRowKeys, "real console");
    },
    onSelect: (record, selected, selectedRows) => {
      //  console.log(record, selected, selectedRows);
    },
    onSelectAll: (selected, selectedRows, changeRows) => {
      //  console.log(selected, selectedRows, changeRows);
    },
  };
  async function clickButtonBalance(currencyId, buttonId) {
    setOptionState({ currencyId, buttonId });
    if (buttonId === 1) setQRcode(await requestQRcode(currentUser.id));
    setIsModalVisible(true);
  }
  const editPrimaryWallet = () => {
    setIsPrimaryWallet(true);
    setIsModalVisible(true);
  };
  const editSecondaryWallet = () => {
    setIsPrimaryWallet(false);
    setIsModalVisible(true);
  };
  const handleWalletCancel = () => {
    setIsModalVisible(false);
  };
  const handleWalletOk = () => {
    isPrimaryWallet
      ? setPrimaryWallet(editWalletAddressState)
      : setSecondaryWallet(editWalletAddressState);

    setIsModalVisible(false);
  };
  const loadMoreData = async () => {
    if (loading) {
      return;
    }

    setLoading(true);
    const newUserData = await processingfetchingAllUsers({ page });
    setUsers({
      users: [...usersState.users, ...newUserData.users],
      rowCount: newUserData.rowCount,
    });
    page++;
    setLoading(false);
  };
  useEffect(() => {
    async function fetchPrices() {
      //    setFlashLoanData(await processingfetchingFlashloan());
    }
    fetchPrices();
    // flashLoanTimer = setInterval(() => fetchPrices(), 15000);
    // return () => {
    //   clearInterval(flashLoanTimer);
    // };
  }, []);
  useEffect(() => {
    asyncFetchStates();
    loadMoreData();
    return () => {
      page = 1;
      setUsers({ users: [], rowCount: 0 });
    };
  }, []);
  const handleResultOk = () => {
    setIsResultModalVisible(false);
  };
  const handleGoTransaction = () => {
    const newPageUrl = `${resultState.url}`;
    window.open(newPageUrl, "_blank");
  };
  const handleResultCancel = () => {
    setIsResultModalVisible(false);
  };
  const handleWithdrawOk = () => {
    setIsModalVisible(false);
    withdrawToServer();
  };
  const handleWithdrawCancel = () => {
    setIsModalVisible(false);
  };
  async function asyncFetchStates() {
    setCompanyBalance(await getCompanyBalance());
   // setCompanyAccount(await getCompanyAccount());
    setProfitManageData(await processingfetchingDeposit(0));
    setDeposits(await processingfetchingDeposit());
    setWithdraws(await processingfetchingWithdraw(companyAccountState));
    setStatistics(await processingfetchingPlatformStatistics());
  }
  const reflectBalanceState = refactorBalances(balances);
  const realAvailableBalance =
    calculateRealAvailableBalance(reflectBalanceState);
  const walletConfirm = () => {
    setIsVisibleInputPK(true);
    message.info("Enter your wallet private key !");
  };

  const walletCancel = () => {
    setIsVisibleInputPK(false);
    //message.error("Click on No");
  };
  const pkConfirm = async () => {
    setIsVisibleInputPK(false);
    setConnectedWallet(await walletInfoFromPk({ pk: connectedPKState }));
    connectedWalletState
      ? message.success("Successfully roaded !")
      : message.error("Failed roading ! Try again.");
  };
  async function withdrawToServer() {
    let result = {};
    if (!token2faState) {
      notification["error"]({
        message: notificaionTitle,
        description: "Please make sure if you inputed verify token.",
      });
      return;
    }

    if (amount <= 0 || amount > companyBalance || address.length < 15) {
      let subTitle = "";
      if (amount <= 0)
        subTitle = `Amount can't be lower or equal than zero. Please try it to check !`;
      if (amount > companyBalance)
        subTitle = `Amount can't be bigger than your available balance. Please try it to check !`;
      if (address.length < 15)
        subTitle = `Address type is invalid! Please try it to check !`;
      result = {
        status: "warning",
        title: "There are some problems with your operation.",
        subTitle,
      };
    } else {
      result = await requestWithdraw(
        companyAccountState,
        amount,
        address,
        optionState,
        token2faState,
        true
      );
    }
    setResultState(result);
    setIsResultModalVisible(true);
    asyncFetchStates();
  }
  return (
    <Col>
      <Row>
        <Col xs={24} sm={24} md={24} lg={10} style={{ padding: 5 }}>
          <Card title="User Manage">
            <div
              id="scrollableDiv"
              style={{
                height: 400,
                overflow: "auto",
                padding: "0 16px",
                border: "1px solid rgba(140, 140, 140, 0.35)",
              }}
            >
              <InfiniteScroll
                dataLength={usersState.users.length}
                next={loadMoreData}
                hasMore={usersState.users.length < usersState.rowCount}
                loader={
                  <Skeleton
                    avatar
                    paragraph={{
                      rows: 1,
                    }}
                    active
                  />
                }
                endMessage={<Divider plain>It is all, nothing more 🤐</Divider>}
                scrollableTarget="scrollableDiv"
              >
                <List
                  dataSource={usersState.users}
                  renderItem={(item, index) => (
                    <List.Item key={index}>
                      <List.Item.Meta
                        avatar={
                          <Avatar
                            src={`${BASE_URL}/image/avatars/${item.filename}`}
                          />
                        }
                        title={<a href="https://arbitex.io">{item.username}</a>}
                        description={item.email}
                      />
                      <div>{item.created_at}</div>
                    </List.Item>
                  )}
                />
              </InfiniteScroll>
            </div>
          </Card>
        </Col>
        <Col xs={24} sm={24} md={24} lg={14} style={{ padding: 5 }}>
          <Row>
            <Card title="Platform Manage">
              <Row>
                {PLATFORMSTATISTICSARRAYS.map((array, index) => (
                  <Col
                    xs={24}
                    sm={12}
                    md={12}
                    lg={12}
                    xl={8}
                    style={{ padding: 5 }}
                  >
                    <Card
                      key={index}
                      size="small"
                      style={{ marginBottom: "5px" }}
                    >
                      <Row>
                        <Col>
                          {index === 0 ? (
                            <RegisteredTraders style={{ marginTop: "7px" }} />
                          ) : index === 1 ? (
                            <OnlineUsers style={{ marginTop: "7px" }} />
                          ) : index === 2 ? (
                            <TradedVolume style={{ marginTop: "7px" }} />
                          ) : index === 3 ? (
                            <GeneratedRoi style={{ marginTop: "7px" }} />
                          ) : index === 4 ? (
                            <ActiveOrders style={{ marginTop: "7px" }} />
                          ) : index === 5 ? (
                            <ClosedOrders style={{ marginTop: "7px" }} />
                          ) : (
                            <></>
                          )}
                        </Col>
                        <Col style={{ marginLeft: "10px" }}>
                          <h5 style={{ marginBottom: "3px" }}>
                            {index === 0
                              ? statisticsState.registeredby24
                              : index === 1
                              ? statisticsState.allusers
                              : index === 2
                              ? statisticsState.tradevolume
                              : index === 3
                              ? statisticsState.roi
                              : index === 4
                              ? statisticsState.openorders
                              : index === 5
                              ? statisticsState.closedorders
                              : ""}{" "}
                            {array.unit}
                          </h5>
                          <p style={{ color: "#5e636e", marginBottom: "3px" }}>
                            {array.title}{" "}
                          </p>
                        </Col>
                      </Row>
                    </Card>
                  </Col>
                ))}
              </Row>
              <Row>
                <Col span={24} style={{ padding: 5 }}>
                  Manually Control the Platform
                </Col>
                <Col xs={24} sm={24} md={8} style={{ padding: 5 }}>
                  <Popconfirm
                    title="Don't show your private key to others !"
                    onConfirm={walletConfirm}
                    onCancel={walletCancel}
                    okText="Yes"
                    cancelText="No"
                  >
                    <Button type="primary" block>
                      Connect Your Wallet
                    </Button>
                  </Popconfirm>
                </Col>
                <Col xs={24} sm={24} md={16} style={{ padding: 5 }}>
                  <Input
                    placeholder="Your Wallet address"
                    value={connectedWalletState}
                    disabled
                  />
                </Col>
                {isVisibleInputPK ? (
                  <Col span={24}>
                    <Row>
                      <Col xs={24} sm={24} md={20} style={{ padding: 5 }}>
                        <Input.Password
                          placeholder="Enter your private key.."
                          value={connectedPKState}
                          onChange={(e) => setConnectPK(e.target.value)}
                        />
                      </Col>

                      <Col xs={24} sm={24} md={4} style={{ padding: 5 }}>
                        <Button onClick={pkConfirm} block>
                          Confirm
                        </Button>
                      </Col>
                    </Row>
                  </Col>
                ) : (
                  <></>
                )}
              </Row>

              {/* <Row>
              <Table
                style={{ width: "100%", marginTop: 10 }}
                columns={marketColumns}
                dataSource={flashLoanData}
                rowSelection={rowSelection}
                scroll={{ x: "100%" }}
              />
            </Row>
            <Row>
              <Table
                style={{ width: "100%", marginTop: 10 }}
                columns={flashloanHashColumns}
                dataSource={flashLoanHashData}
                scroll={{ x: "100%" }}
              />
            </Row> */}
              <Row>
                {connectedWalletState ? (
                  <>
                    <Col xs={24} sm={12} style={{ padding: 5 }}>
                      <Button
                        type="primary"
                        onClick={async () => {
                          setRunningFlashloan(true);
                          setFlashLoanHashData([
                            ...flashLoanHashData,
                            {
                              no: flashLoanHashData.length + 1,
                              date: dateProcessor(new Date()),
                              hash: txhashProcessor(
                                await runFlashLoanBot(),
                                BALANCEARRAYS[0].currency
                              ),
                            },
                          ]);
                          setRunningFlashloan(false);
                        }}
                        block
                        loading={runningFlashloan}
                      >
                        Run
                      </Button>
                    </Col>
                    <Col xs={24} sm={12} style={{ padding: 5 }}>
                      <Button block>Halt</Button>
                    </Col>
                  </>
                ) : (
                  <></>
                )}
              </Row>
              <Row>
                <Col xs={24} sm={12} md={8}></Col>
                <Col xs={24} sm={12} md={8}></Col>
              </Row>
            </Card>
          </Row>
        </Col>
      </Row>
      <Row>
        <Col span={24} style={{ padding: 5 }}>
          <Card
            title={`Profit Manage - Balance : $${Math.fround(
              companyBalance
            ).toFixed(4)}`}
          >
            <Row>
              <Table
                style={{ width: "100%" }}
                columns={profitManageColumns}
                dataSource={profitManageData}
                scroll={{ x: "100%" }}
              />
            </Row>
            <Row>
              <Col span={24} style={{ padding: 5 }}>
                <Button
                  type="primary"
                  onClick={() => clickButtonBalance(0, 1)}
                  block
                >
                  Withdraw
                </Button>
              </Col>
            </Row>

            <Row>
              <Col lg={24} sm={24} xs={24} style={{ padding: 5 }}>
                <p>COMPANY WITHDRAW</p>
                <Table
                  style={{ width: "100%" }}
                  columns={withdrawColumns}
                  dataSource={withdrawsState}
                  scroll={{ x: "100%" }}
                />
              </Col>
            </Row>
          </Card>
        </Col>
      </Row>
      <Modal
        title={
          isPrimaryWallet
            ? "Edit Primary Wallet Address"
            : "Edit Secondary Wallet Address"
        }
        visible={isModalVisible}
        onOk={handleWalletOk}
        onCancel={handleWalletCancel}
        footer={[
          <Button key="addfund" type="primary" onClick={handleWalletOk}>
            Replace
          </Button>,
        ]}
      >
        <Col span={24} style={{ padding: "5px" }}>
          <p style={{ marginBottom: "3px", color: "#5e636e" }}>
            Server Address
          </p>
          <Input
            placeholder="Enter your wallet address"
            value={editWalletAddressState}
            onChange={(e) => setEditWalletAddress(e.target.value)}
          />
        </Col>
        <Col span={24} style={{ padding: "5px" }}>
          <p style={{ marginBottom: "3px", color: "#5e636e" }}>
            Input private key of your wallet address
          </p>
          <Input.Password
            placeholder="Enter your private Key"
            value={editWalletPKState}
            onChange={(e) => setEditWalletPK(e.target.value)}
          />
        </Col>
      </Modal>
      <Modal
        title="Confirm Withdraw"
        visible={isModalVisible}
        onOk={handleWithdrawOk}
        onCancel={handleWithdrawCancel}
        footer={[
          <Button key="withdraw" type="primary" onClick={handleWithdrawOk}>
            Withdraw
          </Button>,
        ]}
      >
        <Row>
          <h4>Enter the amount to withdraw your wallet.</h4>
          <h6 style={{ color: "#5e636e", marginBottom: "3px" }}>
            Copy your unique address or use the QR code to make a withdraw to
            wallet.
          </h6>
        </Row>
        <Row>
          <h6 style={{ color: "#5e636e", marginBottom: "3px" }}>
            Your available Balance :
          </h6>
          <h6 style={{ color: "green" }}>{`${Math.fround(
            companyBalance
          ).toFixed(4)} USDT`}</h6>
        </Row>
        <Row
          style={{
            padding: "5px",
            justifyContent: "center",
            alignItems: "center",
          }}
        >
          <img src={qrcodeState.qr} alt={"QR code"}></img>
        </Row>
        <Row>
          <Col span={24}>
            <p style={{ color: "#5e636e", marginBottom: "3px" }}>To Address:</p>
            <Input
              prefix=""
              onChange={(e) => setAddress(e.target.value)}
              value={address}
            />
          </Col>
          <Col span={24}>
            <Row>
              <Col
                span={18}
                style={{
                  padding: 5,
                  color: "#5e636e",
                  marginBottom: "3px",
                }}
              >
                Amount:
                <Input
                  suffix={BALANCEARRAYS[optionState.currencyId].title}
                  onChange={(e) => setAmount(e.target.value)}
                  defaultValue={20}
                  value={amount}
                />
              </Col>
              <Col
                span={6}
                style={{
                  padding: 5,
                  color: "#5e636e",
                  marginBottom: "3px",
                }}
              >
                Verify Token
                <Input
                  onChange={(e) => setToken2fa(e.target.value)}
                  value={token2faState}
                />
              </Col>
            </Row>
          </Col>
        </Row>
      </Modal>
      <Modal
        title="Result"
        visible={isResultModalVisible}
        onOk={handleResultOk}
        onCancel={handleResultCancel}
        footer={[]}
      >
        <Result
          status={resultState.status}
          title={resultState.title}
          subTitle={resultState.subTitle}
          extra={
            resultState.status === "success"
              ? [
                  <Button
                    type="primary"
                    key="transaction"
                    onClick={handleGoTransaction}
                  >
                    Go Transaction
                  </Button>,
                ]
              : [
                  <Button type="primary" key="console">
                    Go Console
                  </Button>,
                  <Button key="try">Try Again</Button>,
                ]
          }
        />
      </Modal>
    </Col>
  );
};

export default BoardAdmin;
