import {
  Card,
  Button,
  Input,
  Col,
  Row,
  notification,
  Modal,
  Result,
  Table,
} from "antd";
import React, { useState, useEffect } from "react";
import { notificaionTitle, BALANCEARRAYS } from "../../constants";
import { useSelector } from "react-redux";
import { ReactComponent as UsdtErc20svg } from "./../assets/dashboard/usdt_erc20.svg";
import Icon from "@ant-design/icons";
import { ReactComponent as UsdtTrc20svg } from "./../assets/dashboard/usdt_trc20.svg";
import { ReactComponent as UsdtBep20svg } from "./../assets/dashboard/usdt_bep20.svg";
import {
  processingfetchingAddFunds,
  processingfetchingBalances,
  processingfetchingWithdraw,
  refactorBalances,
  requestAddFund,
  requestWithdraw,
  calculateRealAvailableBalance,
  requestQRcode,
} from "../../common/script";
import "./index.css";
import { Toast } from "bootstrap";
import { recoverAddress } from "ethers/lib/utils";

let walletTimer;

const WalletComponent = (props) => {
  const [amount, setAmount] = useState(0);
  const [token2faState, setToken2fa] = useState("");
  //const [realAmountState, setRealAmount] = useState(1);
  const [address, setAddress] = useState("");
  const [balances, setBalances] = useState({
    userTotalBalances: [],
    userTotalWithdraws: [],
    userDepositBalances: [],
  });
  const [isModalVisible, setIsModalVisible] = useState(false);
  const [isResultModalVisible, setIsResultModalVisible] = useState(false);
  const [resultState, setResultState] = useState({
    status: "info",
    title: "Modal",
    url: "",
    address: "",
    hash: "hash sample",
    subTitle: "subtitle",
  });

  const [optionState, setOptionState] = useState({
    currencyId: 0,
    buttonId: 0,
  });
  const [qrcodeState, setQRcode] = useState({});
  const [fundsState, setFunds] = useState([]);
  const [withdrawsState, setWithdraws] = useState([]);

  const { user: currentUser } = useSelector((state) => state.auth);

  useEffect(() => {
    asyncFetchStates();
    walletTimer = setInterval(() => asyncFetchStates(), 60000);
    return () => {
      clearInterval(walletTimer);
    };
  }, []);
  async function asyncFetchStates() {
    setBalances(await processingfetchingBalances(currentUser.id));
    setFunds(await processingfetchingAddFunds(currentUser.id));
    setWithdraws(await processingfetchingWithdraw(currentUser.id));
  }
  function isWeekend(date = new Date()) {
    return date.getDay() === 6 || date.getDay() === 0;
  }
  async function clickButtonBalance(currencyId, buttonId) {
    setOptionState({ currencyId, buttonId });
    if (buttonId === 1) { 
      setQRcode(await requestQRcode(currentUser.id));
      let today;
      const tz = 'America/Los_Angeles';
      today =  await fetch("https://worldtimeapi.org/api/timezone/"+tz)
        .then(response => response.json())
        .then(data => data.day_of_week);

      if(today === 5 || today === 6){
        setIsModalVisible(true);
      }else {
        notification["error"]({
          message: "Withdraw",
          description: "Withdrawals are possible on weekends.",
        });
        setIsModalVisible(false);}

    }else setIsModalVisible(true);
  }
  const handleResultOk = () => {
    setIsResultModalVisible(false);
  };
  const handleGoTransaction = () => {
    const newPageUrl = `${resultState.url}`;
    window.open(newPageUrl, "_blank");
  };
  const handleResultCancel = () => {
    setIsResultModalVisible(false);
  };
  const handleAddFundOk = () => {
    setIsModalVisible(false);
    addFundToServer();
  };
  const handleWithdrawOk = () => {
    setIsModalVisible(false);
    withdrawToServer();
  };
  const handleAddFundCancel = () => {
    setIsModalVisible(false);
  };
  const handleWithdrawCancel = () => {
    setIsModalVisible(false);
  };

  async function addFundToServer() {
    if (amount < 20) {
      notification["error"]({
        message: notificaionTitle,
        description: "Please make sure if your amount is over 20.",
      });
      return;
    }
    setResultState(
      await requestAddFund(
        currentUser.id,
        amount,
        BALANCEARRAYS[optionState.currencyId].currency
      )
    );
    asyncFetchStates();
    setIsResultModalVisible(true);
  }
  async function withdrawToServer() {
    let result = {};
    if (!token2faState) {
      notification["error"]({
        message: notificaionTitle,
        description: "Please make sure if you inputed verify token.",
      });
      return;
    }

    if (
      amount <= 0 ||
      amount > realAvailableBalance[optionState.currencyId] ||
      address.length < 15
    ) {
      let subTitle = "";
      if (amount <= 0)
        subTitle = `Amount can't be lower or equal than zero. Please try it to check !`;
      if (amount > realAvailableBalance[optionState.currencyId])
        subTitle = `Amount can't be bigger than your available balance. Please try it to check !`;
      if (address.length < 15)
        subTitle = `Address type is invalid! Please try it to check !`;
      result = {
        status: "warning",
        title: "There are some problems with your operation.",
        subTitle,
      };
    } else {
      result = await requestWithdraw(
        currentUser.id,
        amount,
        address,
        optionState,
        token2faState
      );
    }
    setResultState(result);
    setIsResultModalVisible(true);
    asyncFetchStates();
  }
  const columns = [
    { title: "Date", dataIndex: "created_at", key: "created_at" },
    { title: "Amount", dataIndex: "amount", key: "amount" },
    { title: "Currency", dataIndex: "currency", key: "currency" },
    { title: "Status", dataIndex: "status", key: "status" },
    { title: "Tx", dataIndex: "txhash", key: "txhash" },
  ];
  const addFundsColumns = [
    { title: "Date", dataIndex: "created_at", key: "created_at" },
    { title: "Amount", dataIndex: "amount", key: "amount" },
    { title: "Currency", dataIndex: "currency", key: "currency" },
    { title: "Status", dataIndex: "status", key: "status" },
    { title: "Tx", dataIndex: "hash", key: "hash" },
    { title: "To", dataIndex: "address", key: "address" },
  ];
  const reflectBalanceState = refactorBalances(balances);
  const realAvailableBalance =
    calculateRealAvailableBalance(reflectBalanceState);

  return (
    <>
      <Col style={{ padding: 5 }}>
        <Card bodyStyle={{ padding: 5 }}>
          <Row>
            {BALANCEARRAYS.map((array, index) => (
              <Col
                md={24}
                sm={24}
                lg={12}
                xs={24}
                style={{ padding: "5px" }}
                key={index}
              >
                <Card
                  style={{
                    width: "100%",
                  }}
                  bodyStyle={{ padding: 20 }}
                  key={index}
                >
                  <Row>
                    <Col xs={12} sm={12} md={10} lg={12} xl={10}>
                      <Row>
                        {index === 0 ? (
                          <Icon
                            component={UsdtErc20svg}
                            style={{ fontSize: "32px", marginRight: 10 }}
                          />
                        ) : index === 1 ? (
                          <Icon
                            component={UsdtBep20svg}
                            style={{ fontSize: "32px", marginRight: 10 }}
                          />
                        ) : index === 2 ? (
                          <Icon
                            component={UsdtTrc20svg}
                            style={{ fontSize: "32px", marginRight: 10 }}
                          />
                        ) : (
                          <></>
                        )}

                        <h5>{array.title}</h5>
                      </Row>
                      <p
                        style={{
                          color: "#5e636e",
                          marginBottom: "3px",
                          marginTop: 10,
                        }}
                      >
                        On orders
                      </p>
                      <p>
                        <span>
                          {Math.fround(
                            reflectBalanceState.reflectuserDeposits[index]
                              .depositBalance
                          ).toFixed(2)}
                        </span>
                        {array.symbol}
                      </p>
                    </Col>
                    <Col
                      xs={12}
                      sm={12}
                      md={7}
                      lg={12}
                      xl={7}
                      style={{
                        padding: 5,
                      }}
                    >
                      <p style={{ color: "#5e636e", marginBottom: "3px" }}>
                        Balance
                      </p>
                      <p>
                        <span>
                          {Math.fround(realAvailableBalance[index]).toFixed(2)}
                        </span>
                        {array.symbol}
                      </p>
                      <p style={{ color: "#5e636e", marginBottom: "3px" }}>
                        Withdraw Pending
                      </p>
                      <p style={{ marginBottom: "3px" }}>
                        <span>
                          {Math.fround(
                            reflectBalanceState.reflectuserWithdraws[index]
                              .pendingWithdraw
                          ).toFixed(2)}
                        </span>
                        {array.symbol}
                      </p>
                    </Col>

                    <Col xs={24} sm={24} md={7} lg={24} xl={7}>
                      <Col align="center" span={24}>
                        <div className="custombtn">
                          <a
                            href="##"
                            rel="noopener noreferrer"
                            style={{ width: "100%", marginBottom: 5 }}
                            onClick={() => clickButtonBalance(index, 0)}
                          >
                            ADD BALANCE
                          </a>
                        </div>
                        <div className="custombtn">
                          <a
                            href="##"
                            style={{ width: "100%", marginBottom: 5 }}
                            onClick={() => clickButtonBalance(index, 1)}
                          >
                            WITHDRAW
                          </a>
                        </div>
                      </Col>
                    </Col>
                  </Row>
                </Card>
              </Col>
            ))}
          </Row>
          <Row></Row>
          {!optionState.buttonId ? (
            <Modal
              title="Purchase confirmation"
              visible={isModalVisible}
              onOk={handleAddFundOk}
              onCancel={handleAddFundCancel}
              footer={[
                <Button key="addfund" type="primary" onClick={handleAddFundOk}>
                  Purchase
                </Button>,
              ]}
            >
              <Row>
                <h4>Enter the amount to deposit</h4>
                <h6>
                  Input your amout and click the Purchase button in order to
                  receive the depositing address.
                </h6>
              </Row>
              <Row>
                Amount:
                <Input
                  suffix={BALANCEARRAYS[optionState.currencyId].title}
                  onChange={(e) => setAmount(e.target.value)}
                  defaultValue={20}
                  value={amount}
                />
              </Row>
            </Modal>
          ) : (
            <Modal
              title="Confirm Withdraw"
              visible={isModalVisible}
              onOk={handleWithdrawOk}
              onCancel={handleWithdrawCancel}
              footer={[
                <Button
                  key="withdraw"
                  type="primary"
                  onClick={handleWithdrawOk}
                >
                  Withdraw
                </Button>,
              ]}
            >
              <Row>
                <h4>Enter the amount to withdraw your wallet.</h4>
                <h6 style={{ color: "#5e636e", marginBottom: "3px" }}>
                  Copy your unique address or use the QR code to make a withdraw
                  to wallet.
                </h6>
              </Row>
              <Row>
                <h6 style={{ color: "#5e636e", marginBottom: "3px" }}>
                  Your available Balance :
                </h6>
                <h6 style={{ color: "green" }}>{`${Math.fround(
                  realAvailableBalance[optionState.currencyId]
                ).toFixed(4)} USDT`}</h6>
              </Row>
              <Row
                style={{
                  padding: "5px",
                  justifyContent: "center",
                  alignItems: "center",
                }}
              >
                <img src={qrcodeState.qr} alt={"QR code"}></img>
              </Row>
              <Row>
                <Col span={24}>
                  <p style={{ color: "#5e636e", marginBottom: "3px" }}>
                    To Address:
                  </p>
                  <Input
                    prefix=""
                    onChange={(e) => setAddress(e.target.value)}
                    value={address}
                  />
                </Col>
                <Col span={24}>
                  <Row>
                    <Col
                      span={18}
                      style={{
                        padding: 5,
                        color: "#5e636e",
                        marginBottom: "3px",
                      }}
                    >
                      Amount:
                      <Input
                        suffix={BALANCEARRAYS[optionState.currencyId].title}
                        onChange={(e) => setAmount(e.target.value)}
                        defaultValue={20}
                        value={amount}
                      />
                    </Col>
                    <Col
                      span={6}
                      style={{
                        padding: 5,
                        color: "#5e636e",
                        marginBottom: "3px",
                      }}
                    >
                      Verify Token
                      <Input
                        onChange={(e) => setToken2fa(e.target.value)}
                        value={token2faState}
                      />
                    </Col>
                  </Row>
                </Col>
                <Col span={24} style={{ padding: 5 }}>
                  <Row>
                    <Col sm={24} md={24} lg={12}>
                      <Input
                        addonBefore="Commission"
                        addonAfter={
                          BALANCEARRAYS[optionState.currencyId].symbol
                        }
                        defaultValue="0.03%"
                        disabled
                      />
                    </Col>
                    <Col sm={24} md={24} lg={12}>
                      <Input
                        addonBefore="You will get"
                        addonAfter={
                          BALANCEARRAYS[optionState.currencyId].symbol
                        }
                        value={amount * 0.999}
                        disabled
                      />
                    </Col>
                  </Row>
                </Col>
              </Row>
            </Modal>
          )}
          <Modal
            title="Result"
            visible={isResultModalVisible}
            onOk={handleResultOk}
            onCancel={handleResultCancel}
            footer={[]}
          >
            <Result
              status={resultState.status}
              title={resultState.title}
              subTitle={resultState.subTitle}
              extra={
                resultState.status === "success"
                  ? [
                      <Button
                        type="primary"
                        key="transaction"
                        onClick={handleGoTransaction}
                      >
                        Go Transaction
                      </Button>,
                    ]
                  : [
                      <Button type="primary" key="console">
                        Go Console
                      </Button>,
                      <Button key="try">Try Again</Button>,
                    ]
              }
            />
          </Modal>
        </Card>
      </Col>
      <Col style={{ padding: 5 }}>
        <Card title="Recent transactions">
          <Row>
            <Col lg={24} sm={24} xs={24}>
              <p>ADD FUND</p>
              <Table
                style={{ width: "100%" }}
                columns={addFundsColumns}
                dataSource={fundsState}
                scroll={{ x: '100%' }}
              />
            </Col>
            <Col lg={24} sm={24} xs={24}>
              <p>WITHDRAW</p>
              <Table
                style={{ width: "100%" }}
                columns={columns}
                dataSource={withdrawsState}
                scroll={{ x: '100%' }}

              />
            </Col>
          </Row>
        </Card>
      </Col>
    </>
  );
};
export default WalletComponent;
