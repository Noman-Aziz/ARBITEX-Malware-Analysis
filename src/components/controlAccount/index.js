import {
  Card,
  Col,
  Row,
  Upload,
  Input,
  Button,
  Modal,
  Result,
  notification,
  Radio,
  Popconfirm,
} from "antd";
import React, { useState, useEffect } from "react";
import { useDispatch, useSelector } from "react-redux";
import { API_URL, BASE_URL, notificaionTitle } from "./../../constants";
import axios from "axios";
import {
  dateProcessor,
  isAutoMode,
  makeAutoMode,
  requestQRcode,
  requestUpdateUser,
  getCompanyAccount
} from "../../common/script";
import { setUserSetting } from "../../slices/setting";

const ControlAccount = (props) => {
  const { user: currentUser } = useSelector((state) => state.auth);
  const [currentPWDState, setCurrentPWD] = useState("");
  const [qrcodeState, setQRcode] = useState({});
  const [newPWDState, setNewPWD] = useState("");
  const [confirmPWDState, setConfirmPWD] = useState("");
  const [modevValue, setModeValue] = useState(1);
  const [showPopupMenu, setShowPopupMenu] = useState(false);
  const [isResultModalVisible, setIsResultModalVisible] = useState(false);

  const [resultState, setResultState] = useState({
    status: "info",
    title: "Modal",
    subTitle: "subtitle",
  });
  const [stateAutoMode, setStateAutoMode] = useState({
    timeline: new Date(),
    timenow: new Date(),
    status: false,
  });
  const [fileList, setFileList] = useState([
    {
      uid: "-1",
      name: `${currentUser.filename}`,
      status: "done",
      url: `${BASE_URL}/image/avatars/${currentUser.filename}`,
    },
  ]);
  const dispatch = useDispatch();
  const onModeChange = (e) => {
    dispatch(setUserSetting({ mode: e.target.value }));
    if (e.target.value === 2)
      if (!stateAutoMode.status) setShowPopupMenu(true);
      else setShowPopupMenu(false);
    else setShowPopupMenu(false);
    console.log("radio checked", e.target.value);
    setModeValue(e.target.value);
  };
  const onChange = ({ fileList: newFileList }) => {
    setFileList(newFileList);
  };
  const confirmAutoMode = async () => {
    if (!stateAutoMode.status) {

      const result = await makeAutoMode({ id: currentUser.id});
      if (result.status) {
        notification["success"]({
          message: notificaionTitle,
          description: `Your auto click service is activated until ${dateProcessor(
            result.timeline
          )}`,
        });
      } else
        notification["error"]({
          message: notificaionTitle,
          description:
            "Sorry! the server can not activate your service. \n Please double-check your available balance.",
        });
    } else {
      notification["info"]({
        message: notificaionTitle,
        description: `Your auto click service will be terminated until ${dateProcessor(
          stateAutoMode.timeline
        )}`,
      });
    }
    setStateAutoMode(await isAutoMode());
    setShowPopupMenu(false);
  };
  const onUpload = async ({ file, onSuccess, onError, onProgress }) => {
    let formData = new FormData();
    formData.append("image", fileList[0].originFileObj);
    axios
      .post(`${API_URL}users/auth/avatar/${currentUser.id}`, formData)
      .then((res) => {
        let user = JSON.parse(sessionStorage.getItem("user"));

        user.filename = res.data.data.filename;
        sessionStorage.setItem("user", JSON.stringify(user));
        onSuccess(null, "image");
      })
      .catch((err) => {
        onError(null, "image");
      });
  };
  const onPreview = async (file) => {
    let src = file.url;
    if (!src) {
      src = await new Promise((resolve) => {
        const reader = new FileReader();
        reader.readAsDataURL(file.originFileObj);
        reader.onload = () => resolve(reader.result);
      });
    }
    const image = new Image();
    image.src = src;
    const imgWindow = window.open(src);
    imgWindow.document.write(image.outerHTML);
  };
  useEffect(() => {
    asyncFetchStates();
  }, []);
  async function asyncFetchStates() {
    setStateAutoMode(await isAutoMode());
    setQRcode(await requestQRcode(currentUser.id));
  }

  async function changeUserPassword() {
    if (!currentPWDState) {
      notification["error"]({
        message: notificaionTitle,
        description: "Please Input your curren password.",
      });
      return;
    }
    if (newPWDState !== confirmPWDState) {
      notification["error"]({
        message: notificaionTitle,
        description: "Please Check your confirm password.",
      });
      return;
    }

    const updatedUser = {
      id: currentUser.id,
      newpwd: newPWDState,
      currentpwd: currentPWDState,
    };
    setResultState(await requestUpdateUser(updatedUser));
    setIsResultModalVisible(true);
  }
  const changeProfile = () => {};
  const handleResultOk = () => {
    setIsResultModalVisible(false);
  };
  const handleResultCancel = () => {
    setIsResultModalVisible(false);
  };
  const changePwd = () => {
    changeUserPassword();
  };

  return (
    <Col>
      <Row>
        <Col sm={24} md={24} lg={12} xl={10} style={{ padding: "5px" }}>
          <Card title="Profile">
            <Upload
              accept="image/png, image/jpeg"
              listType="picture-card"
              fileList={fileList}
              onChange={onChange}
              onPreview={onPreview}
              customRequest={onUpload}
            >
              {fileList.length < 1 && "+ Upload"}
            </Upload>

            <Row>
              <Col span={12} style={{ padding: "5px" }}>
                <p style={{ marginBottom: "3px", color: "#5e636e" }}>Email</p>
                <Input placeholder="Email" value={currentUser.email} disabled />
              </Col>

              <Col span={12} style={{ padding: "5px" }}>
                <p style={{ marginBottom: "3px", color: "#5e636e" }}>Login</p>
                <Input
                  placeholder="Login"
                  value={currentUser.username}
                  disabled
                />
              </Col>

              <Col span={12} style={{ padding: "5px" }}>
                <p style={{ marginBottom: "3px", color: "#5e636e" }}>
                  Registration date
                </p>
                <Input
                  placeholder="Registration date"
                  value={
                    new Date(currentUser.created_at).getFullYear() +
                    "-" +
                    (new Date(currentUser.created_at).getMonth() + 1) +
                    "-" +
                    new Date(currentUser.created_at).getDate() +
                    " " +
                    new Date(currentUser.created_at).getHours() +
                    ":" +
                    new Date(currentUser.created_at).getMinutes()
                  }
                  disabled
                />
              </Col>
            </Row>
            <Col>
              <Col span={24} style={{ padding: "5px" }}>
                <Button
                  style={{ width: "100%" }}
                  type="primary"
                  size="large"
                  onClick={changeProfile}
                >
                  Save
                </Button>
              </Col>
            </Col>
          </Card>
        </Col>
        <Col sm={24} md={12} lg={12} xl={7} style={{ padding: "5px" }}>
          <Card title="Change password">
            <Row>
              <Col span={24} style={{ padding: "5px" }}>
                <p style={{ marginBottom: "3px", color: "#5e636e" }}>
                  Current Password
                </p>
                <Input.Password
                  placeholder="Old password"
                  onChange={(e) => setCurrentPWD(e.target.value)}
                />
              </Col>
              <Col span={24} style={{ padding: "5px" }}>
                <p style={{ marginBottom: "3px", color: "#5e636e" }}>
                  New Password
                </p>
                <Input.Password
                  placeholder="New Password"
                  onChange={(e) => setNewPWD(e.target.value)}
                />
              </Col>
              <Col span={24} style={{ padding: "5px" }}>
                <p style={{ marginBottom: "3px", color: "#5e636e" }}>
                  Confirm password
                </p>
                <Input.Password
                  placeholder="Confirm password"
                  onChange={(e) => setConfirmPWD(e.target.value)}
                />
              </Col>
              <Col span={24} style={{ padding: "5px" }}>
                <Button
                  style={{ width: "100%" }}
                  type="primary"
                  size="large"
                  onClick={changePwd}
                >
                  Save
                </Button>
              </Col>
            </Row>
          </Card>
        </Col>
        <Col sm={24} md={12} lg={12} xl={7} style={{ padding: "5px" }}>
          <Card title="Google authenticator">
            <Row>
              <Col>
                <h6>TWO-FACTOR AUTHENTICATION</h6>
                <p style={{ color: "#5e636e" }}>
                  Google Authenticator generates 2-Step Verification codes on
                  your phone. 2-Step Verification provides stronger security for
                  your account by requiring a second step of verification when
                  you sign in, edit account or collect your earnings.
                </p>
                <p>
                  1. Install{" "}
                  <a
                    href="https://www.google.com/search?q=Google+Authenticator"
                    target="_blank"
                    rel="noopener noreferrer"
                  >
                    Google Authenticator
                  </a>{" "}
                  on your mobile device.
                </p>
                <p>2. Your Shared Secret Code is: </p>
                <Row>
                  <Input value={currentUser.base32}></Input>
                </Row>
                <Row
                  style={{
                    padding: "5px",
                    justifyContent: "center",
                    alignItems: "center",
                  }}
                >
                  <img
                    src={qrcodeState.qr}
                    alt={"Your shared secret key"}
                  ></img>
                </Row>
                <p>
                  Please enter a two-factor token from Google Authenticator to
                  verify the correct setup
                </p>
                {/* <p style={{ marginBottom: "3px", color: "#5e636e" }}>
                To disable 2FA, enter the current code:
              </p>
              <Input placeholder="Your code" />
              <Button
                style={{ width: "100%", marginTop: "10px" }}
                type="primary"
                size="large"
              >
                Save
              </Button> */}
              </Col>
            </Row>
          </Card>
        </Col>
      </Row>
      <Row>
        <Col span={24} style={{ padding: "5px" }}>
          <Card title={"Manual & Auto Mode"}>
            <Row>
              <Col xs={24} sm={24} md={12}>
                <p style={{ fontSize: "1.4em", color: "#5e636e" }}>
                  You have an auto click service by{" "}
                  {dateProcessor(stateAutoMode.timeline)}{" "}
                </p>
              </Col>
              <Col xs={24} sm={24} md={12}>
                <Radio.Group onChange={onModeChange} value={modevValue}>
                  <Radio value={1}>Manual Mode</Radio>
                  <Radio value={2}>Auto Mode</Radio>
                </Radio.Group>
                <Popconfirm
                  title="If you have no auto click service, You will have a payment $25 for it."
                  visible={showPopupMenu}
                  onConfirm={confirmAutoMode}
                  onCancel={() => {}}
                  okText="Yes"
                  cancelText="No"
                ></Popconfirm>
              </Col>
            </Row>
          </Card>
        </Col>
      </Row>
      <Modal
        title="Result"
        visible={isResultModalVisible}
        onOk={handleResultOk}
        onCancel={handleResultCancel}
        footer={[
          <Button type="primary" key="ok" onClick={handleResultOk}>
            OK
          </Button>,
        ]}
      >
        <Result
          status={resultState.status}
          title={resultState.title}
          subTitle={resultState.subTitle}
        />
      </Modal>
    </Col>
  );
};
export default ControlAccount;
