import {
  Card,
  Button,
  Col,
  Row,
  notification,
  Table,
  Progress,
  Modal,
  Slider,
  Result,
} from "antd";
import { SketchOutlined } from "@ant-design/icons";
import React, { useState, useEffect } from "react";
import { ethers } from "ethers";
import { notificaionTitle, PLANARRAYS, BALANCEARRAYS } from "../../constants";
import TransactionService from "../../services/transaction.service";
import { useSelector } from "react-redux";

import { ReactComponent as UsdtErc20svg } from "./../assets/dashboard/usdt_erc20.svg";
import Icon from "@ant-design/icons";
import { ReactComponent as UsdtTrc20svg } from "./../assets/dashboard/usdt_trc20.svg";
import { ReactComponent as UsdtBep20svg } from "./../assets/dashboard/usdt_bep20.svg";
import {
  processingfetchingDeposit,
  processingfetchingBalances,
  refactorBalances,
} from "../../common/script";
window.ethersProvider = new ethers.providers.InfuraProvider("ropsten");

const MakePlan = (props) => {
  const [amount, setAmount] = useState(0);
  const [stateList, setStateList] = useState([]);
  const [errorState, setErrorState] = useState({
    active: false,
    code: 404,
    text: "",
  });
  const [balances, setBalances] = useState({
    userTotalBalances: [],
    userTotalWithdraws: [],
    userDepositBalances: [],
  });
  const [planState, setplanState] = useState({ planId: 0, buttonId: 0 });
  const { user: currentUser } = useSelector((state) => state.auth);
  const [isModalVisible, setIsModalVisible] = useState(false);
  const [paymentId, setTermsPaymentState] = useState(0);
  const [isResultModalVisible, setIsResultModalVisible] = useState(false);
  const [resultState, setResultState] = useState({
    status: "info",
    title: "Modal",
    hash: "hash sample",
    subTitle: "subtitle",
  });

  const handleResultOk = () => {
    setIsResultModalVisible(false);
  };
  const handleGoTransaction = () => {
    const newPageUrl = `https://ropsten.etherscan.io/tx/${resultState.hash}`;
    window.open(newPageUrl, "_blank");
  };
  const handleResultCancel = () => {
    setIsResultModalVisible(false);
  };

  const handleSubmitPlan = () => {
    if (
      amount < PLANARRAYS[planState.planId].min ||
      amount > PLANARRAYS[planState.planId].max
    ) {
      notification["error"]({
        message: notificaionTitle,
        description: `You can not set the amount smaller or bigger than Plan's min or max! Please Add your funds or resize your amount.`,
      });
      return;
    }
    setIsModalVisible(false);
    depositToServer();
  };
  const sliderChange = (value) => {
    setAmount(value);
  };

  const handleSubmitPlanCancel = () => {
    setIsModalVisible(false);
  };

  useEffect(() => {
    asyncFetchStates();
  }, []);
  async function asyncFetchStates() {
    setBalances(await processingfetchingBalances(currentUser.id));
    setStateList(await processingfetchingDeposit(currentUser.id));
  }
  function clickButtonPlan(planId, buttonId) {
    setplanState({ planId, buttonId });
    setAmount(reflectBalanceState.reflectuserBalances[0].availableBalance);
    setIsModalVisible(true);
  }
  function clickTermsPayment(usdtId) {
    setTermsPaymentState(usdtId);
    setAmount(reflectBalanceState.reflectuserBalances[usdtId].availableBalance);
    setIsModalVisible(true);
  }

  async function depositToServer() {
    let result = resultState;
    await TransactionService.postDeposit({
      user_id: currentUser.id,
      plan_id: planState.planId,
      amount,
      currency: BALANCEARRAYS[paymentId].currency,
    }).then(
      (response) => {
        const err = {
          active: false,
        };
        result = {
          status: "success",
          title: "Successfully Delivered to Server ! ",
          subTitle: `Transaction Id is ${Math.floor(Math.random() % 10000)}`,
        };
        setErrorState(err);
      },
      (error) => {
        const _content =
          (error.response && error.response.data) ||
          error.message ||
          error.toString();
        const err = {
          active: true,
          code: _content.error.code,
          text: _content.error.message,
        };
        result = {
          status: "error",
          title: "There are some problems with the system.",
          subTitle: `Error : ${error.message} Please Contact to administator !`,
        };
        setErrorState(err);
      }
    );
    setResultState(result);
    setIsResultModalVisible(true);
    // getDepositList();
  }
  const columns = [
    { title: "Profit\n(%)", dataIndex: "profit", key: "profit" },
    { title: "Amount\n(USDT)", dataIndex: "amount", key: "amount" },
    { title: "Earned Profit\n(USDT)", dataIndex: "earned", key: "earned" },
    { title: "Created Date", dataIndex: "created_at", key: "created_at" },
    { title: "Expire Date", dataIndex: "expiretime", key: "expiretime" },
    { title: "Transaction Hash", dataIndex: "txhash", key: "txhash" },
  ];

  const data = stateList;

  const reflectBalanceState = refactorBalances(balances);
  return (
    <>
      <Row style={{ padding: 5 }}>
        <Card title="Plans Option">
          <Row>
            After the registration, an user has the Free plan. Activate other
            plans to improve your account and open profitable features for
            trading.
          </Row>
          <Row>
            {PLANARRAYS.map((array, index) => (
              <Col lg={6} sm={24} md={12}  xs={24} style={{ padding: "5px" }}>
                <Card
                  style={{
                    width: "100%",
                  }}
                  key={index}
                  title={array.title}
                >
                  {array.description.map((data, i) => (
                    <p key={i} style={{ color: "#959fa3" }}>
                      <SketchOutlined /> {data.text}
                    </p>
                  ))}

                  <Row>
                    {array.options.map((data, i) => (
                      <Col
                        align="center"
                        span={24 / array.options.length}
                        key={i}
                      >
                        <Button
                          onClick={() => clickButtonPlan(index, i)}
                          style={{ width: "70%" }}
                          type="primary"
                        >
                          {data.text}
                        </Button>
                      </Col>
                    ))}
                  </Row>
                  <Row style={{ marginTop: 10 }}>
                    <Progress
                      strokeColor={{
                        from: "#108ee9",
                        to: "#87d068",
                      }}
                      percent={23}
                      status="active"
                    />
                  </Row>
                </Card>
              </Col>
            ))}
          </Row>
        </Card>
      </Row>
      <Row style={{ padding: 5 }}>
        <Card style={{ width: "100%" }}>
          <Row style={{ marginTop: 16 }}>
            <Table
              size="small"
              style={{ width: "100%" }}
              columns={columns}
              pagination={false}
              dataSource={data}
            />
          </Row>
          <Row>
            {errorState.active &&
              notification["error"]({
                message: notificaionTitle,
                description: errorState.text,
              })}
          </Row>
          <Modal
            title="Purchase confirmation"
            visible={isModalVisible}
            onOk={handleSubmitPlan}
            onCancel={handleSubmitPlanCancel}
            footer={[
              <Button key="cancel" onClick={handleSubmitPlanCancel}>
                CANCEL
              </Button>,
              <Button key="pay" type="primary" onClick={handleSubmitPlan}>
                PAY NOW
              </Button>,
            ]}
          >
            <h4>Submit Plan for ${amount} for 30 days. </h4>
            <h5>No automatic renewal.</h5>
            <p>{PLANARRAYS[planState.planId].title}</p>
            {PLANARRAYS[planState.planId].description.map((data, i) => (
              <Row>
                <p key={i}>{data.text}</p>
              </Row>
            ))}
            <Row>
              {BALANCEARRAYS.map((array, index) => (
                <Col md={12} sm={24} lg={8}  xs={24} style={{ padding: "5px" }}>
                  <Button
                    type="text"
                    block
                    style={{ height: "120px" }}
                    onClick={() => clickTermsPayment(index)}
                  >
                    <Row>
                      <Col>
                        {index === 0 ? (
                          <Icon
                            component={UsdtErc20svg}
                            style={{
                              fontSize: "28px",
                              marginRight: 10,
                            }}
                          />
                        ) : index === 1 ? (
                          <Icon
                            component={UsdtBep20svg}
                            style={{
                              fontSize: "28px",
                              marginRight: 10,
                            }}
                          />
                        ) : index === 2 ? (
                          <Icon
                            component={UsdtTrc20svg}
                            style={{
                              fontSize: "28px",
                              marginRight: 10,
                            }}
                          />
                        ) : (
                          <></>
                        )}
                      </Col>
                      <Col>
                        <Row>
                          <p style={{ marginBottom: 3 }}>
                            <bold>{array.title}</bold>
                          </p>
                        </Row>
                      </Col>
                    </Row>
                    <Row>
                      <Col>
                        <Row>
                          <p style={{ color: "#8f96a3", marginBottom: 3 }}>
                            Balance
                          </p>
                        </Row>
                        <Row>
                          <p style={{ color: "#8f96a3", marginBottom: 3 }}>
                            {Math.fround(
                              reflectBalanceState.reflectuserBalances[index]
                                .availableBalance
                            ).toFixed(2)}{" "}
                            {array.symbol}
                          </p>
                        </Row>
                        <Row>
                          <p style={{ color: "#8f96a3", marginBottom: 3 }}>
                            {"USD $"}
                            {Math.fround(
                              reflectBalanceState.reflectuserBalances[index]
                                .availableBalance
                            ).toFixed(2)}
                          </p>
                        </Row>
                      </Col>
                    </Row>
                  </Button>
                </Col>
              ))}
            </Row>

            <Row>
              <Col span={24}>
                <Slider
                  autoFocus
                  step={2}
                  min={0}
                  max={
                    reflectBalanceState.reflectuserBalances[paymentId]
                      .availableBalance
                  }
                  onChange={sliderChange}
                />
              </Col>
            </Row>
          </Modal>
        </Card>
      </Row>
      <Modal
        title="Result"
        visible={isResultModalVisible}
        onOk={handleResultOk}
        onCancel={handleResultCancel}
        footer={[
          <Button key="ok" type="primary" onClick={handleResultOk}>
            OK
          </Button>,
        ]}
      >
        <Result
          status={resultState.status}
          title={resultState.title}
          subTitle={resultState.subTitle}
          extra={
            resultState.status === "success"
              ? [
                  <Button
                    type="primary"
                    key="transaction"
                    onClick={handleGoTransaction}
                  >
                    Go Transaction
                  </Button>,
                ]
              : [
                  <Button type="primary" key="console">
                    Go Console
                  </Button>,
                  <Button key="try">Try Again</Button>,
                ]
          }
        />
      </Modal>
    </>
  );
};
export default MakePlan;
