import {
  Card,
  Row,
  Table,
  Col,
  notification,
  Result,
  Button,
  Modal,
  Input,
  Select,
  Steps,
  message,
  Popconfirm,
} from "antd";
import React, { useState, useEffect } from "react";
import { useSelector } from "react-redux";
import Icon from "@ant-design/icons";
import "./index.css";
import {
  processingfetchingBalances,
  refactorBalances,
  processingfetchingDeposit,
  calculateRealAvailableBalance,
  requestDeposit,
  isAutoMode,
  dateProcessor,
  makeAutoMode,
} from "../../common/script";

import { BALANCEARRAYS, notificaionTitle } from "../../constants";
const { Option } = Select;
const { Step } = Steps;
let txtTimer;
const TransactionHistory = (props) => {
  const { setting: platformSetting } = useSelector((state) => state.setting);
  const [stateList, setStateList] = useState([]);
  const [stateAutoMode, setStateAutoMode] = useState({
    timeline: new Date(),
    timenow: new Date(),
    status: false,
  });
  const [stateOrderProcessDone, setStateOrderProcessDone] = useState(false);
  const [stateAllowAutoMode, setStateAlllowAutoMode] = useState(false);
  const [balances, setBalances] = useState({
    userTotalBalances: [],
    userTotalWithdraws: [],
    userDepositBalances: [],
  });
  const { user: currentUser } = useSelector((state) => state.auth);
  const [isModalVisible, setIsModalVisible] = useState(false);
  const [amount, setAmount] = useState(20);
  const [profitState, setProfit] = useState({ profit: 0.5, time: 2 });
  const [resultState, setResultState] = useState({
    status: "info",
    title: "Modal",
    subTitle: "subtitle",
  });

  const [isResultModalVisible, setIsResultModalVisible] = useState(false);
  const [currentCarryOrder, setCurrentCarryOrder] = useState(0);
  const stepsForCarryOrder = [
    {
      title: "Choose Mode",
      content: "First-content",
    },
    {
      title: "Return Settings",
      content: "Second-content",
    },
    {
      title: "Confirm",
      content: "Last-content",
    },
  ];
  useEffect(() => {
    asyncFetchStates();
    txtTimer = setInterval(() => asyncFetchStates(), 60000);
    return () => {
      clearInterval(txtTimer);
    };
  }, []);
  const next = async () => {
    if (currentCarryOrder === 0 && platformSetting.mode === 2)
      await confirmAutoMode();
    setCurrentCarryOrder(currentCarryOrder + 1);
  };

  const prev = () => {
    setStateOrderProcessDone(false);
    setCurrentCarryOrder(currentCarryOrder - 1);
  };
  const handleBeforeSubmitPlan = async () => {};

  const handleSubmitPlan = async () => {
    if (amount < 20 || amount > realAvailableBalance[0]) {
      notification["error"]({
        message: notificaionTitle,
        description: "Please make sure if your amount is correct.",
      });
      return;
    }
    setResultState(
      await requestDeposit(
        currentUser.id,
        amount,
        BALANCEARRAYS[0].currency,
        stateAllowAutoMode ? 7 * 24 : profitState.time,
        profitState.profit * 7,
        stateAllowAutoMode
      )
    );
    setIsResultModalVisible(true);
  };
  const handleSubmitPlanCancel = () => {
    setCurrentCarryOrder(0);
    setStateOrderProcessDone(false);
    setIsModalVisible(false);
  };
  const onClickAutoMode = () => {};
  const onClickManualMode = () => {
    setStateAlllowAutoMode(false);
    next();
  };
  const confirmAutoMode = async () => {
    setProfit({ profit: 3, time: 12 });
    setStateAlllowAutoMode(true);
    setBalances(await processingfetchingBalances(currentUser.id));
  };
  const handleChange = (value) => {
    if (value === "24 Hours") setProfit({ profit: 6, time: 24 });
    if (value === "12 Hours") setProfit({ profit: 3, time: 12 });
    if (value === "6 Hours") setProfit({ profit: 1.5, time: 6 });
    if (value === "3 Hours") setProfit({ profit: 0.75, time: 3 });
    if (value === "2 Hours") setProfit({ profit: 0.5, time: 2 });
  };
  const handleResultOk = () => {
    asyncFetchStates();
    setCurrentCarryOrder(0);
    setStateOrderProcessDone(false);
    setIsResultModalVisible(false);
    setIsModalVisible(false);
  };

  const columns = [
    { title: "Time", dataIndex: "created_at", key: "created_at" },
    { title: "Amount of\n transaction", dataIndex: "amount", key: "amount" },
    { title: "Earned Profit\n(USDT)", dataIndex: "u_earned", key: "u_earned" },
    { title: "Status", dataIndex: "status", key: "status" },
    { title: "Mode", dataIndex: "mode", key: "mode" },
    { title: "Action", dataIndex: "action", key: "action" },

  ];
  async function asyncFetchStates() {
    setStateList(await processingfetchingDeposit(currentUser.id));
    setBalances(await processingfetchingBalances(currentUser.id));
  }

  const data = stateList
  const reflectBalanceState = refactorBalances(balances);
  const realAvailableBalance =
    calculateRealAvailableBalance(reflectBalanceState);
  return (
    <Col style={{ padding: 5 }}>
      <Row>
        <Col span={24} style={{ padding: 5 }}>
          <Row style={{ float: "left" }}>
            <Col>
              <h5 style={{ color: "#5e636e" }}>In the transaction</h5>
              <h5>
                {Math.fround(
                  reflectBalanceState.reflectuserDeposits[0].depositBalance
                ).toFixed(3)}
              </h5>
            </Col>
          </Row>
          <Row style={{ float: "right" }}>
            <Col>
              <h5 style={{ color: "#5e636e" }}>Wallet balance</h5>
              <h5>{Math.fround(realAvailableBalance[0]).toFixed(3)}</h5>
            </Col>
          </Row>
        </Col>
      </Row>
      <Row>
        <Card
          style={{ width: "100%" }}
          title="Intelligent competition for orders"
        >
          <Row>
            <Col span={24}>
              <Row>
                <p style={{ color: "#5e636e" }}>
                  Click button for intelligent competition for orders
                  immediately
                </p>
                <hr />
              </Row>
              <Row style={{ float: "left" }}>
                <Col>
                  <p style={{ color: "#5e636e" }}>Successful transaction</p>
                  <h6>{stateList.length}</h6>
                  <p style={{ color: "#5e636e" }}>Transaction amount</p>
                  <h6>
                    {Math.fround(
                      reflectBalanceState.reflectuserDeposits[0]
                        .totalDepositAmount
                    ).toFixed(3)}
                  </h6>
                </Col>
              </Row>
              <Row style={{ float: "right" }}>
                <Col>
                  <p style={{ color: "#5e636e" }}>Income from transaction</p>
                  <h6>
                    {Math.fround(
                      reflectBalanceState.reflectuserDeposits[0].profitAmount
                    ).toFixed(3)}
                  </h6>
                  <p style={{ color: "#5e636e" }}>Income statistics</p>
                  <h6>{"-"}</h6>
                </Col>
              </Row>
            </Col>
          </Row>
          <Row>
            <Col span={24}>
              <div className="hallcenter">
                <a
                  href="##"
                  style={{ width: "100%", textAlign: "center" }}
                  onClick={async () => {
                    setStateAutoMode(await isAutoMode());
                    setIsModalVisible(true);
                  }}
                >
                  Immediate competition for orders
                  <span></span>
                  <span></span>
                  <span></span>
                  <span></span>
                </a>
              </div>
            </Col>
          </Row>
        </Card>
      </Row>
      <Row style={{ marginTop: "10px" }}>
        <Card
          style={{ width: "100%" }}
          title="Records of competition for orders"
        >
          <Row>
            <Table
              style={{ width: "100%" }}
              columns={columns}
              dataSource={data}
              scroll={{ x: "100%" }}
            />
          </Row>
        </Card>
      </Row>
      <Modal
        title="Create Order"
        visible={isModalVisible}
        onOk={handleSubmitPlan}
        onCancel={handleSubmitPlanCancel}
        footer={[
          <Button key="cancel" onClick={handleSubmitPlanCancel}>
            CANCEL
          </Button>,
          <Button
            key="pay"
            type="primary"
            onClick={handleSubmitPlan}
            disabled={!stateOrderProcessDone}
          >
            Carry Order
          </Button>,
        ]}
      >
        <Steps current={currentCarryOrder}>
          {stepsForCarryOrder.map((item) => (
            <Step key={item.title} title={item.title} />
          ))}
        </Steps>
        <div>
          {currentCarryOrder === 1 ? (
            <Col style={{ padding: 5 }}>
              <Row>
                <Col span={12}>
                  <p style={{ color: "#5e636e", marginBottom: 10 }}>
                    Your Balance : (USDT){" "}
                  </p>
                  <h6>{Math.fround(realAvailableBalance[0]).toFixed(3)}</h6>
                </Col>
                <Col span={12}>
                  <p style={{ color: "#5e636e", marginBottom: 3 }}>
                    Order Time :{" "}
                  </p>
                  <Select
                    defaultValue={stateAllowAutoMode ? "7 weeks" : "2 Hours"}
                    disabled={stateAllowAutoMode}
                    style={{ width: "100%" }}
                    onChange={handleChange}
                  >
                    {/* <Option value="24 Hours">24 Hours</Option>
                    <Option value="12 Hours">12 Hours</Option>
                    <Option value="6 Hours">6 Hours</Option> */}
                    <Option value="2 Hours">2 Hours</Option>
                  </Select>
                </Col>
              </Row>
              <Row>
                {/* <Col span={12}>
                  <p style={{ color: "#5e636e", marginBottom: 3 }}>
                    {"Profit -> "}
                  </p>
                </Col>
                <Col span={12}>
                  <h6>{profitState.profit}%</h6>
                </Col> */}
              </Row>
              <p style={{ color: "#5e636e" }}>Amount : </p>

              <Input
                suffix={BALANCEARRAYS[0].title}
                onChange={(e) => setAmount(e.target.value)}
                defaultValue={20}
                value={amount}
              />
            </Col>
          ) : (
            <></>
          )}
        </div>
        <div>
          {currentCarryOrder === 0 ? (
            <Col style={{ padding: 5 }}>
              <Row align="center" style={{ width: "15vw", height: "10vh" }}>
                <h5 style={{ color: "#5e636e", marginBottom: 3 }}>
                  {" "}
                  The current mode is{" "}
                </h5>{" "}
                <h5 style={{ marginLeft: 5 }}>
                  {platformSetting.mode === 1 ? "Manual" : "Auto"}
                </h5>
              </Row>
              {/* <Row align="center">
                <p style={{ fontSize: "1.4em", color: "#5e636e" }}>
                  You have an auto click service by{" "}
                  {dateProcessor(stateAutoMode.timeline)}{" "}
                </p>
              </Row>
              <Row>
                <Col span={12} style={{ padding: 5 }}>
                  <Button
                    type="text"
                    style={{ height: 100 }}
                    onClick={() => {
                      onClickManualMode();
                    }}
                    block
                  >
                    Manual Mode
                  </Button>
                </Col>
                <Col span={12} style={{ padding: 5 }}>
                  <Popconfirm
                    title="If you have no auto click service, You will have a payment $25 for it."
                    //visible={stateAutoMode.status}
                    onConfirm={confirmAutoMode}
                    onCancel={() => {}}
                    okText="Yes"
                    cancelText="No"
                  >
                    <Button
                      type="text"
                      style={{ height: 100 }}
                      onClick={() => {
                        onClickAutoMode();
                      }}
                      block
                    >
                      Auto Mode
                    </Button>
                  </Popconfirm>
                </Col>
              </Row> */}
            </Col>
          ) : (
            <></>
          )}
        </div>
        <div>
          {currentCarryOrder === 2 ? (
            <>
              <Col>
                <Row>
                  <p style={{ color: "#5e636e", marginBottom: 3 }}>
                    {" "}
                    Order Mode:
                  </p>{" "}
                  {stateAutoMode ? "Auto Mode" : "Manual Mode"}
                </Row>
                <Row>
                  <p style={{ color: "#5e636e", marginBottom: 3 }}>
                    {" "}
                    Currency:
                  </p>
                  {BALANCEARRAYS[0].currency}
                </Row>
                <Row>
                  <p style={{ color: "#5e636e", marginBottom: 3 }}>
                    {" "}
                    Order Amount:
                  </p>
                  {amount}
                </Row>
                {/* <Row>
                  <p style={{ color: "#5e636e", marginBottom: 3 }}>
                    {" "}
                    Return Percent:
                  </p>
                  {profitState.profit}%
                </Row> */}
                <Row>
                  <p style={{ color: "#5e636e", marginBottom: 3 }}>
                    {" "}
                    Return Time:
                  </p>
                  {stateAllowAutoMode ? "7 weeks" : `${profitState.time}h`}
                </Row>
              </Col>
            </>
          ) : (
            <></>
          )}
        </div>
        <div>
          <Row>
            {currentCarryOrder < stepsForCarryOrder.length - 1 && (
              <Col xs={24} sm={24} md={12} style={{ padding: 5 }}>
                <Button type="primary" onClick={() => next()} block>
                  Next
                </Button>
              </Col>
            )}

            {currentCarryOrder === stepsForCarryOrder.length - 1 && (
              <Col xs={24} sm={24} md={12} style={{ padding: 5 }}>
                <Button
                  type="primary"
                  onClick={() => {
                    message.success("Processing complete!");
                    setStateOrderProcessDone(true);
                  }}
                  block
                >
                  Done
                </Button>
              </Col>
            )}

            {currentCarryOrder > 0 && (
              <Col xs={24} sm={24} md={12} style={{ padding: 5 }}>
                <Button onClick={() => prev()} block>
                  Previous
                </Button>
              </Col>
            )}
          </Row>
        </div>
      </Modal>
      <Modal
        title="Result"
        visible={isResultModalVisible}
        onOk={handleResultOk}
        onCancel={handleResultOk}
        footer={[
          <Button key="ok" type="primary" onClick={handleResultOk}>
            OK
          </Button>,
        ]}
      >
        <Result
          status={resultState.status}
          title={resultState.title}
          subTitle={resultState.subTitle}
        />
      </Modal>
    </Col>
  );
};

export default TransactionHistory;
